{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A\\\\Desktop\\\\xpto-oficial\\\\xpto-oficial\\\\XPTO\\\\src\\\\components\\\\Main\\\\Section02\\\\MainSecButtonCTA\\\\index.jsx\",\n  _s = $RefreshSig$();\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport PopDesign from \"../../../PopUp\";\nimport { GlobalButton } from \"../../../stylesGlobal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainSection = styled.div`\n    text-align: center;\n    max-width: 1080px;\n    width: 100%;\n`;\n_c = MainSection;\nconst GlobalButtonCTA = styled(GlobalButton)`\n    margin: 1.5rem 0rem;\n\n    @media (max-width: 768px) {\n        width: 208px;\n        height: 44px;\n        font-size: 16px;\n        font-weight: 200;\n        margin: 0 0 1.5rem;\n    }\n\n`;\n_c2 = GlobalButtonCTA;\nfunction MainSecButtonCTA(props) {\n  _s();\n  // define estado \"open\" como false usando o hook useState\n  const [open, setOpen] = useState(false);\n\n  // função para abrir o popup definida aqui\n  const popUpOpen = () => {\n    setOpen(true);\n  };\n\n  // função para fechar o popup definida aqui\n  const popUpClose = () => {\n    setOpen(false);\n  };\n\n  // botão <GlobalButtonCTA onClick={popUpOpen}> com evento onClick para abrir o popup\n  //  {open && <PopDesign onClose={popUpClose} />} renderiza o componente de popup apenas se o estado \"open\" for true\n  return /*#__PURE__*/_jsxDEV(MainSection, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalButtonCTA, {\n      onClick: popUpOpen,\n      name: props,\n      children: JSON.stringify(props.name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), open && /*#__PURE__*/_jsxDEV(PopDesign, {\n      onClose: popUpClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_s(MainSecButtonCTA, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n_c3 = MainSecButtonCTA;\n;\nexport default MainSecButtonCTA;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MainSection\");\n$RefreshReg$(_c2, \"GlobalButtonCTA\");\n$RefreshReg$(_c3, \"MainSecButtonCTA\");","map":{"version":3,"names":["styled","useState","PopDesign","GlobalButton","jsxDEV","_jsxDEV","MainSection","div","_c","GlobalButtonCTA","_c2","MainSecButtonCTA","props","_s","open","setOpen","popUpOpen","popUpClose","children","onClick","name","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","onClose","_c3","$RefreshReg$"],"sources":["C:/Users/A/Desktop/xpto-oficial/xpto-oficial/XPTO/src/components/Main/Section02/MainSecButtonCTA/index.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\nimport { useState } from \"react\";\r\nimport PopDesign from \"../../../PopUp\";\r\nimport { GlobalButton } from \"../../../stylesGlobal\";\r\n\r\nconst MainSection = styled.div`\r\n    text-align: center;\r\n    max-width: 1080px;\r\n    width: 100%;\r\n`;\r\n\r\nconst GlobalButtonCTA = styled(GlobalButton)`\r\n    margin: 1.5rem 0rem;\r\n\r\n    @media (max-width: 768px) {\r\n        width: 208px;\r\n        height: 44px;\r\n        font-size: 16px;\r\n        font-weight: 200;\r\n        margin: 0 0 1.5rem;\r\n    }\r\n\r\n`;\r\n\r\nfunction MainSecButtonCTA(props) {\r\n\r\n     // define estado \"open\" como false usando o hook useState\r\n    const [open, setOpen] = useState(false)\r\n\r\n    // função para abrir o popup definida aqui\r\n    const popUpOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    // função para fechar o popup definida aqui\r\n    const popUpClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    // botão <GlobalButtonCTA onClick={popUpOpen}> com evento onClick para abrir o popup\r\n    //  {open && <PopDesign onClose={popUpClose} />} renderiza o componente de popup apenas se o estado \"open\" for true\r\n    return (\r\n        <MainSection >\r\n            <GlobalButtonCTA onClick={popUpOpen} name={props}>{JSON.stringify(props.name)}</GlobalButtonCTA>\r\n            {open && <PopDesign onClose={popUpClose} />}\r\n        </MainSection >\r\n    )\r\n};\r\n\r\nexport default MainSecButtonCTA;"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,YAAY,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,WAAW,GAAGN,MAAM,CAACO,GAAI;AAC/B;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,WAAW;AAMjB,MAAMG,eAAe,GAAGT,MAAM,CAACG,YAAY,CAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACO,GAAA,GAXID,eAAe;AAarB,SAASE,gBAAgBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAE5B;EACD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;;EAEvC;EACA,MAAMe,SAAS,GAAGA,CAAA,KAAM;IACpBD,OAAO,CAAC,IAAI,CAAC;EACjB,CAAC;;EAED;EACA,MAAME,UAAU,GAAGA,CAAA,KAAM;IACrBF,OAAO,CAAC,KAAK,CAAC;EAClB,CAAC;;EAED;EACA;EACA,oBACIV,OAAA,CAACC,WAAW;IAAAY,QAAA,gBACRb,OAAA,CAACI,eAAe;MAACU,OAAO,EAAEH,SAAU;MAACI,IAAI,EAAER,KAAM;MAAAM,QAAA,EAAEG,IAAI,CAACC,SAAS,CAACV,KAAK,CAACQ,IAAI;IAAC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAkB,CAAC,EAC/FZ,IAAI,iBAAIT,OAAA,CAACH,SAAS;MAACyB,OAAO,EAAEV;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEvB;AAACb,EAAA,CAvBQF,gBAAgB;AAAAiB,GAAA,GAAhBjB,gBAAgB;AAuBxB;AAED,eAAeA,gBAAgB;AAAC,IAAAH,EAAA,EAAAE,GAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAnB,GAAA;AAAAmB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}